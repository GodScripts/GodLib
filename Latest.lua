--[[

---//==================================================\\---
--|| > About Library									||--
---\===================================================//---

	Library:		GodLib
	Version:		1.00
	Author:			Devn

---//==================================================\\---
--|| > Changelog										||--
---\===================================================//---

	Version 0.01:
		- Initial library release.
	
	Version 1.00:
		- Library re-write.

--]]

---//==================================================\\---
--|| > Initialization									||--
---\===================================================//---

assert(load(Base64Decode(""), nil, "bt", _ENV))()
